js是脚本语言:
	是一种轻量级的编程语言

ECMA-262是javascript标准的官方名称
1995年出现在Netscape中,并在1997年被ECMA采纳

ECMAScript是欧洲计算机制造商协会通过ECMA-262标准化的脚本程序设计语言,Javascript已经由ECMA通过ECMAScript实现语言的标准化

老旧的浏览器可能会在script标签中使用type="text/javascript"。现在js是所有现代浏览器以及HTML5中的默认脚本语言

js语法: 语法规则定义了语言结构
	字面量: 一个字面量是一个常量(等式字面量,函数字面量,对象字面量,数组字面量,数字字面量,字符串字面量)

	变量: 用于存储数据值
	变量通常是可以改变的,字面量是一个恒定的值。变量是一个名称,字面量是一个值

	js对大小写敏感

js语句: 语句的作用是告诉浏览器该做什么

js变量: 变量是用于存储信息的容器
	可以用字母、$符号、_符号开头
	
	重新声明变量,该变量的值不会丢失

	命名: 驼峰命名法
		 1.全部小写,单词用下划线连接
		 2.大小写混合(大驼峰、小驼峰)

	变量类型: 
		1.值类型(保存在栈中、保存与复制的是值本身、可用typeof检测类型、基本类型数据是值类型)
		2.引用类型(保存在堆中、保存和赋值指向对象的一个指针、使用instanceof检测类型、使用new()方法构造的对象是引用类型)

	作用域:
		特性:
			1.局部变量是调用对象的属性
			2.作用域链(内层函数可以访问外层函数局部变量、外层函数不能访问内层函数局部变量)

			3.生命周期(全局变量(除非显式删除,否则一直存在)、局部变量(自申明起至函数运行完毕或被显式删除)、回收机制(标记清除和引用计数))

js数据类型:
	boolean:使用Boolean()转换,转换为false(0、NaN、空字符串、null、undefined),其他转换为true

	string: 
		特性: 
			1.由0或多个16位Unicode字符组成
			2.无法精确返回双字节字符长度
			3.字符串一旦被创建,不能改变,若要改变必须销毁原有字符串

		转义序列:
			\n(换行)、\t(制表符)、\b(空格)、\r(回车)、\f(分页)、\\(斜杠\)、\xnn(十六进制,n代表0~F)、\unnnn(以十六进制代码表示一个unicode字符)

		类型转换:
			1.toString():number、boolean、sring、object
			2.String(): undefined、null

	number: 
		进制:
			八进制: 
				1.前导0,有效序列0-7
				2.超出范围(前导0被忽略,后续数值以10进制计数)

			十六进制:
				1.前导0x
				2.有效序列0-9,A-F

		浮点数:
			1.最高精度17位小数
			2.缺陷,存在舍入误差,无法测试特定浮点数值

		数值范围:
			1.最大最小值(Number.MAX_VALUE、Numbe.MIN_VALUE)
			2.检测超出范围(isFinite())
			3.正无穷:Infinity;负无穷:-Infinity

		NaN: 
			1.检测(isNaN())

		数值转换:
			1.Number():
				忽略前置空格
				null -> 0
				undefined -> NaN
				只包含数字的字符串忽略前导0
				空字符串 -> 0
				十六进制 -> 相同大小十六进制数
				其他字符串格式 -> NaN
				object(1.valueOf() 2.toString())

			parseInt():
				特性:
					忽略前置空格
					直接找到第一个非空字符串
						不是数字或负号 -> NaN
						数字字符 -> 解析后续字符,直到非数字字符
					小数点不是有效数字
				参数:
					1.要解析的字符串
					2.转换时使用的基数

			parseFloat():
				从第一个字符开始解析(测试也忽略前置空格)
				遇到无效浮点数格式后结束
				只有第一个小数点有效
				忽略前导0
				十六进制数始终为0
				没有小数点或小数点后全为0,转换为整数

		object: 一组数据或功能的集合
			属性与方法:
				1.constructor:保存用于创建当前对象的函数
				2.hasOwnProperty(propertyName):检测给定属性在当前实例中是否存在
				3.isPrototypeOf(object):检测传入的对象是否是另一个对象的原型
				4.toLocaleString():返回对象字符串表示,该字符串与执行环境的地区对应
				5.toString():返回对象的字符串表示
				6.valueOf():返回对象的字符串表示,数值或布尔值表示;通常与toString()的值相同


