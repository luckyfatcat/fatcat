js函数:
	定义方法:
		1.静态方法:
			function 函数名([虚参列表]) {
				函数体;
				[return[函数返回值]]
			}

		2.动态匿名方法: var 函数名 = new Function([虚参列表],函数体);

		3.直接量方法: 函数名 = function([虚参列表]) {函数体}

	调用方法:
		1.连接中调用:
			<a href = "javascript: 函数名()"></a>

		2.在事件中调用:
			事件类型 = "函数名()"

		3.直接调用:
			函数名()

		4.递归调用: 函数内部调用函数自身

	方法:
		1.apply: 将函数作为对象的方法来调用,将参数以数组形式传递给该方法

		2.call: 将函数作为对象方法来调用,将指定参数传递给该方法

		3.toString: 返回函数的字符串表示

	arguments对象:
		功能: 存放实参的参数列表
		
		特性(仅在函数体内使用、带有下标属性但不是数组、函数声明时自动初始化)

		属性: length -> 获取实参长度
			  callee -> 返回当前正在指向的函数
			  caler -> 返回调用当前正在执行函数的函数名
	指针标识:
		this: 指向当前操作对象
		callee: 指向参数集合所属函数
		prototype: 指向函数附带的原型对象
		constructor: 指向创建该对象的构造函数

js作用域: 作用域是可访问变量的集合
js中,作用域为可访问变量、对象、函数的集合

js事件: 事件是可以被js侦测到的行为

js字符串:
	通过new String()可以创建字符串对象,不要创建String对象,会拖慢执行速度,并可能产生其他副作用

	原始值可以使用js的属性和方法,因为js在执行方法和属性时可以把原始值当做对象

	方法:
		charAt: 返回指定索引位置的字符
		charCodeAt: 返回指定索引位置字符的Unicode值
		concat: 连接两个或多个字符串,返回连接后的字符串
		fromCharCode: 将指定的Unicode值转换为字符串
		indexOf: 返回字符串检索指定字符第一次出现的未知
		lastIndexOf: 返回字符串中检索字符最后一次出现的位置
		localeCompare: 用本地特定的顺序来比较两个字符串
		match: 找到一个或多个正则表达式的匹配
		replace: 替换与正则表达式匹配的字符串
		search: 检索与正则表达式相匹配的值
		slice: 提取字符串片段,并在新的字符串中返回被提取的部分
		split: 把字符串分割为子字符串数组
		substr: 从起始索引号提取字符串中指定数组的字符
		substring: 提取字符串中两个指定索引号之间的字符
		toLocaleLowerCase: 根据主机语言环境把字符串转换为小写
		toLocaleUpperCase: 根据主机语言环境把字符串转换为大写
		toLowerCase: 把字符串转换为小写
		toString: 返回字符串对象值(疑问:字符串对象值和字符串值)
		toUpperCase: 把字符串转换为大写
		trim: 移除字符串首尾空白
		valueOf: 返回某个字符串对象的原始值