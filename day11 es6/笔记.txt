ECMAScript和JavaScript的关系是,前者是后者的规格,后者是前者的一种实现

ES6既是一个历史名词,也是一个泛指,含义是5.1版以后的JavaScript的下一代标准,涵盖了ES2015等

顶层对象属性和全局变量:
	var和function声明的全局变量依旧是顶层对象的属性,let、const、class声明的就不属于顶层对象的属性

this:
	全局环境中,this返回顶层对象,node和es6模块中,this返回当前模块
	
	函数里面的this,如果函数不是作为对象的方法运行,而是单纯作为函数运行,this会指向顶层对象。但是严格模式下,this会返回undefined

	不管是严格模式还是普通模式,new Function(){return this};总是会返回全局对象。但是如果浏览器用了CSP(Content Security Policy,内容安全策略),那么eval、new Function这些方法都无法使用

3.变量的解构赋值(允许按照一定模式,从数组和对象中提取值,对变量进行赋值)
	1.数组的解构赋值
		let [a,b,c] = [1,2,3];

		默认值,允许指定默认值

	2.对象解构赋值
		let {foo,bar} = {foo:"aa",bar:"bb"};
		实际上:
		let {foo:foo,bar:bar} = {foo:"aa",bar:"bb"};
			foo = "aa"

	3.字符串解构赋值,字符串被转换成了一个类似数组对象
		const [a,b,c,d,e] = "hello";
			a = "h"

	4.数值和布尔值的解构赋值
		等号右边是数值和布尔值,会先转为对象

	5.函数参数的解构赋值
		undefined会触发函数参数的默认值

	6.圆括号问题(es6规则,只要有可能导致解构的歧义,就不得使用圆括号)
		模式不能使用圆括号

	7.用途
		1：交换变量
			[x, y] = [y, x];

		2：从函数返回多个值

4.字符串的扩展
	1.字符的Unicode表示法
		es6加强了对Unicode的支持,允许用\uxxxx形式表示一个字符,其中xxxx表示字符的Unicoe码点
		将码点放进大括号就能正确读取字符
		"\u{37995}"

	2.字符串的遍历器接口
		字符串可以被for of循环遍历